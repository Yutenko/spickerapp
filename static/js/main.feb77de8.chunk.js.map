{"version":3,"sources":["CanvasSurface.js","TextEditor.js","App.js","serviceWorker.js","index.js"],"names":["CanvasSurface","canvas","useRef","_useGlobal","useGlobal","_useGlobal2","Object","slicedToArray","showSpicker","react_default","a","createElement","Fragment","es","ref","canvasDraw","canvasWidth","canvasHeight","hideGrid","Button_default","variant","onClick","clear","className","Icon_default","Fab_default","Transition","props","Slide_default","assign","direction","Textarea","_useState","useState","JSON","parse","localStorage","getItem","_useState2","list","setList","_useState3","_useState4","input","setInput","removeFromList","value","filter","el","useEffect","setItem","stringify","style","paddingTop","TextField_default","id","label","margin","onKeyDown","e","keyCode","which","l","concat","toConsumableArray","target","onChange","fullWidth","List_default","dense","map","text","i","ListItem_default","key","button","ListItemText_default","primary","ListItemSecondaryAction_default","IconButton_default","bind","TextEditor","open","setOpen","handleClose","Dialog_default","fullScreen","onClose","TransitionComponent","AppBar_default","Toolbar_default","color","aria-label","Typography_default","TextEditor_Textarea","setGlobal","spicker","App","src_CanvasSurface_0","src_TextEditor_0","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.feb77de8.chunk.js","sourcesContent":["import React, { useRef } from 'react'\nimport CanvasDraw from \"react-canvas-draw\"\nimport Button from '@material-ui/core/Button'\nimport Icon from '@material-ui/core/Icon'\nimport { useGlobal } from 'reactn'\nimport Fab from '@material-ui/core/Fab'\n\n\nimport './CanvasSurface.css'\n\nconst CanvasSurface = () => {\n\n const defaultProps = {\n  loadTimeOffset: 5,\n  lazyRadius: 30,\n  brushRadius: 12,\n  brushColor: \"#444\",\n  catenaryColor: \"#0a0302\",\n  gridColor: \"rgba(150,150,150,0.17)\",\n  hideGrid: true,\n  canvasWidth: '100vw',\n  canvasHeight: '100vh',\n  disabled: false,\n  imgSrc: \"\",\n  saveData: null,\n  immediateLoading: false\n }\n\n  let canvas = useRef(null)\n  const clear = () => { canvas.clear() }\n  const [open,showSpicker] = useGlobal('spicker')\n\n  return (\n   <>\n    <CanvasDraw\n     ref={canvasDraw => (canvas = canvasDraw)}\n     canvasWidth={'100vw'}\n     canvasHeight={'100vh'}\n     hideGrid={true}\n    />\n    <Button variant=\"outlined\" onClick={clear} className=\"clear\">\n      <Icon>clear_all</Icon> Neu\n    </Button>\n    <Fab className=\"spicker\" onClick={()=>{showSpicker(true)}}>\n    <Icon>add</Icon>\n      </Fab>\n   </>\n  )\n}\n\n\nexport default CanvasSurface\n","import React, { useState,useEffect } from 'react'\nimport './TextEditor.css'\nimport { useGlobal } from 'reactn'\n\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport Slide from '@material-ui/core/Slide'\nimport Icon from '@material-ui/core/Icon'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport TextField from '@material-ui/core/TextField'\n\n\nfunction Transition(props) {\n  return <Slide direction=\"up\" {...props} />\n}\n\nconst TextEditor = () => {\n  const [ open,setOpen ] = useGlobal('spicker')\n  const handleClose = () => { setOpen(false) }\n  const handleOpen = () => { setOpen(true) }\n\n  return (\n    <Dialog\n      fullScreen\n      open={open}\n      onClose={handleClose}\n      TransitionComponent={Transition}\n    >\n      <AppBar className={'app-bar'}>\n        <Toolbar>\n          <IconButton color=\"inherit\" onClick={handleClose} aria-label=\"Close\">\n            <Icon>close</Icon>\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" className={'flex'}>\n            Spickzettel\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Textarea/>\n    </Dialog>\n  )\n}\n\n\nconst Textarea = (props) => {\n  const [list,setList] = useState(\n     JSON.parse(localStorage.getItem('spicker')) || []\n  )\n  const [input,setInput] = useState('')\n  const removeFromList = (value) => {\n    setList(list.filter(el => el !== value))\n  }\n  const addToList = (e) => {\n    if (e.keyCode === 13 || e.which === 13) {\n      const l = [...list,e.target.value]\n      setList(l)\n      setInput('')\n    }\n   }\n\n  useEffect(() => {\n    localStorage.setItem('spicker', JSON.stringify(list))\n  }, [list])\n\n\n  return (\n   <div style={{paddingTop:55}}>\n    <TextField\n     id=\"outlined-search\"\n     label=\"Zum Spickzettel hinzufÃ¼gen\"\n     margin=\"dense\"\n     variant=\"outlined\"\n     onKeyDown={addToList}\n     onChange={(e) => setInput(e.target.value)}\n     value={input}\n     fullWidth\n     />\n\n    <List dense>\n     {list.map((text,i) => (\n       <ListItem key={'spicker-'+i} button>\n         <ListItemText primary={text} />\n         <ListItemSecondaryAction>\n          <IconButton onClick={removeFromList.bind(this,text)}><Icon>close</Icon></IconButton>\n         </ListItemSecondaryAction>\n       </ListItem>\n     ))}\n    </List>\n\n    </div>\n  )\n}\n\n\nexport default TextEditor\n","import React from 'react'\nimport './App.css'\nimport { setGlobal } from 'reactn'\n\nimport CanvasSurface from './CanvasSurface'\nimport TextEditor from './TextEditor'\n\nsetGlobal({\n  spicker:false\n})\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CanvasSurface />\n      <TextEditor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}